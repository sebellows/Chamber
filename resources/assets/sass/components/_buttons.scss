// Modified from Foundation for Sites by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

////
/// @group button
////

/// Padding inside buttons.
/// @type List
$button-padding: em(12) em(16) !default;

/// Margin around buttons.
/// @type List
$button-margin: 0 0 $global-margin 0 !default;

/// Default fill for buttons. Can either be `solid` or `hollow`.
/// @type Keyword
$button-fill: solid !default;

/// Default background color for buttons.
/// @type Color
$button-background: $primary-color !default;

/// Background color on hover for buttons.
/// @type Color
$button-background-hover: scale-color($button-background, $lightness: -15%) !default;

/// Font color for buttons.
/// @type List
$button-color: $white !default;

/// Font color for buttons, if the background is light.
/// @type List
$button-color-alt: $black !default;

/// Border radius for buttons, defaulted to global-radius.
/// @type Number
$button-radius: $global-radius !default;

/// Sizes for buttons.
/// @type Map
$button-sizes: (
  tiny: 0.6rem,
  small: 0.75rem,
  default: 0.875rem,
  large: 1.25rem,
) !default;

/// opacity for a disabled button.
/// @type List
$button-opacity-disabled: 0.25 !default;

/// Background color lightness on hover for buttons.
/// @type Number
$button-background-hover-lightness: -20% !default;

/// Color lightness on hover for hollow buttons.
/// @type Number
$button-hollow-hover-lightness: -50% !default;

// Internal: flip from margin-right to margin-left for defaults
@if $global-text-direction == 'rtl' {
  $button-margin: 0 0 $global-margin $global-margin !default;
}

// TODO: Document button-base() mixin
@mixin button-base {
  @include disable-mouse-outline;
  display: inline-block;
  text-align: center;
  line-height: 1;
  cursor: pointer;
  -webkit-appearance: none;
  transition: background-color 0.25s ease-out, color 0.25s ease-out;
  vertical-align: middle;
  border: 1px solid transparent;
  border-radius: $button-radius;
  padding: $button-padding;
  margin: $button-margin;
  font-size: map-get($button-sizes, default);
}

/// Expands a button to make it full-width.
/// @param {Boolean} $expand [true] - Set to `true` to enable the expand behavior. Set to `false` to reverse this behavior.
@mixin button-expand($expand: true) {
  @if $expand {
    display: block;
    width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
  @else {
    display: inline-block;
    width: auto;
    margin: $button-margin;
  }
}

/// Sets the visual style of a button.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
@mixin button-style(
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $background-hover-lightness: $button-background-hover-lightness
) {
  @if $color == auto {
    $color: foreground($background, $button-color-alt, $button-color);
  }

  @if $background-hover == auto {
    $background-hover: scale-color($background, $lightness: $background-hover-lightness);
  }

  background-color: $background;
  color: $color;

  &:hover, &:focus {
    background-color: $background-hover;
    color: $color;
  }
}

@mixin button-hollow(
  $color: $primary-color
) {
  $color-hover: foreground($color);

  background-color: transparent;
  border: 1px solid $color;
  color: $color;
  text-transform: uppercase;

  &:hover, &:focus {
    background-color: $color;
    border-color: $color;
    color: $color-hover;
  }
}

/// Adds disabled styles to a button by fading the element, reseting the cursor, and disabling pointer events.
@mixin button-disabled($color: $primary-color) {
  opacity: $button-opacity-disabled;
  cursor: not-allowed;

  &:hover, &:focus {
    background-color: $color;
    color: $button-color;
  }
}

/// Adds a dropdown arrow to a button.
/// @param {Number} $size [0.4em] - Size of the arrow. We recommend using an `em` value so the triangle scales when used inside different sizes of buttons.
/// @param {Color} $color [white] - Color of the arrow.
/// @param {Number} $offset [$button-padding] - Distance between the arrow and the text of the button. Defaults to whatever the right padding of a button is.
@mixin button-dropdown(
  $size: 0.4em,
  $color: $white,
  $offset: get-side($button-padding, right)
) {
  &::after {
    @include css-triangle($size, $color, down);
    position: relative;
    top: 0.4em; // Aligns the arrow with the text of the button
    float: #{$global-right};
    margin-#{$global-left}: get-side($button-padding, right);
    display: inline-block;
  }
}

/// Adds all styles for a button. For more granular control over styles, use the individual button mixins.
/// @param {Boolean} $expand [false] - Set to `true` to make the button full-width.
/// @param {Color} $background [$button-background] - Background color of the button.
/// @param {Color} $background-hover [$button-background-hover] - Background color of the button on hover. Set to `auto` to have the mixin automatically generate a hover color.
/// @param {Color} $color [$button-color] - Text color of the button. Set to `auto` to automatically generate a color based on the background color.
/// @param {Keyword} $style [solid] - Set to `hollow` to create a hollow button. The color defined in `$background` will be used as the primary color of the button.
@mixin button(
  $expand: false,
  $background: $button-background,
  $background-hover: $button-background-hover,
  $color: $button-color,
  $style: $button-fill
) {
  @include button-base;

  @if $style == solid {
    @include button-style($background, $background-hover, $color);
  }
  @else if $style == hollow {
    // @include button-hollow;
    @include button-hollow($background);
  }

  @if $expand {
    @include button-expand;
  }
}

@mixin foundation-button {
  .button {
    @include button;

    // Sizes
    @each $size, $value in map-remove($button-sizes, default) {
      &.#{$size} {
        font-size: $value;
      }
    }

    &.expanded { @include button-expand; }

    // Colors
    @each $name, $color in $foundation-palette {
      @if $button-fill != hollow {
        &.#{$name} {
          @include button-style($color, auto, auto);
        }
      }
      @else {
        &.#{$name} {
          @include button-hollow($color);
        }

        &.#{$name}.dropdown::after {
          border-top-color: $color;
        }
      }
    }

    // Hollow style
    @if $button-fill != hollow {
      &.hollow {
        // @include button-hollow;
        @include button-hollow;

        @each $name, $color in $foundation-palette {
          &.#{$name} {
            @include button-hollow($color);
          }
        }
      }
    }

    // Disabled style
    &.disabled,
    &[disabled] {
      @include button-disabled;

      @each $name, $color in $foundation-palette {
        &.#{$name} {
          @include button-disabled($color);
        }
      }
    }

    // Dropdown arrow
    &.dropdown {
      @include button-dropdown;

      @if $button-fill == hollow {
        &::after {
          border-top-color: $button-background;
        }
      }
    }

    // Button with dropdown arrow only
    &.arrow-only::after {
      margin-#{$global-left}: 0;
      float: none;
      top: -0.1em;
    }
  }
}


//// Custom
///
.alt.button {
  background-color: color(cvb);
  border: 0 none;
  color: $white;

  &:hover, &:focus {
    background-color: scale-color(color(cvb), -20%);
    border: 0 none;
    color: $white;
  }
}

.reverse.hollow.button {
  background-color: transparent;
  border: 1px solid $white;
  color: $white;

  &:hover, &:focus {
    background-color: $white;
    border: 1px solid transparent;
    color: neutral(3);
  }
}

.flat.button {
  color: neutral(5);
  background-color: neutral(0);
  border: 0 none;
  text-transform: capitalize;

  &:active {
    color: shade(neutral(5), 10%);
    background-color: neutral(1);
    border: 0 none;
  }

  &:focus,
  &:hover {
    color: neutral(5);
    background-color: shade(neutral(0), 10%);
    border: 0 none;
  }
}

.icon-button {
  border: 0 none;
  margin: 0;
  padding: rem-calc(8);
}

//// YouTube play button
.playButton {
  position: absolute;
  border: none;
  background-color: transparent;
  color: inherit;
  cursor: pointer;
  margin-left: -34px;
  margin-top: -24px;
  padding: 0;
  font-size: 100%;
  font-family: inherit;
  line-height: inherit;
  text-align: inherit;
  left: 50%;
  top: 50%;
  width: 68px;
  height: 48px;
  z-index: 1;
  transition: opacity .25s cubic-bezier(0.0,0.0,0.2,1);
}

.button.raised {
  @include z-depth(1, true, 2);
  transition: all .25s cubic-bezier(0.0,0.0,0.2,1);
}

.rsvp.button {
  padding: rem(6 8);
  margin: 0;
}