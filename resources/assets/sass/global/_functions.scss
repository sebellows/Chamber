/// Functions
/// 

/// Add a color via its variable key
/// 
/// @param {Color} $color - the name of the color to use
/// @returns {Color} the value of the color key
/// 
@function color($key) {
  @if map-has-key($palette, $key) {
    @return map-get($palette, $key);
  }

  @warn "Unknown `#{$key}` in $palette.";
  @return null;
}

/// Add a neutral color (i.e. graytone) via its variable key
/// 
/// @param {Color} $color - the name of the shade to use
/// @returns {Color} the shade of the color key
/// 
@function neutral($key) {
  @if map-has-key($neutrals, $key) {
    @return map-get($neutrals, $key);
  }

  @warn "Unknown `#{$key}` in $neutrals.";
  @return null;
}

/// Syntactic sugaring of Foundation's rem-calc function ('cause I don't want to type 5 more letters all of the time).
///
@function rem($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }
  
  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function em($value, $base: 16px) {
  // Pixel and unitless values are converted to rems
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base);
  }

  // Then the value is converted to ems
  @return strip-unit($value) * 1em;
}

/// Converts rem value to pixel values.
/// 
/// i.e., this undoes Foundations `rem-calc()`
/// 
@function px-calc($values, $base: null) {
  $px-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-px($values, $base);
  }

  @for $i from 1 through $count {
    $px-values: append($px-values, -zf-to-px(nth($values, $i), $base));
  }

  @return $px-values;
}

/// Converts a rem value to matching px value. *Any* value passed, regardless of unit, is assumed to be a rem value. By default, the base pixel value used to convert the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Rem value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in px, calculated based on the given 
/// value and the base pixel value. px values are passed through as is.
/// 
@function -zf-to-px($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to px-calc(), which is not a number.';
    @return $value;
  }

  // Calculate px if units for $value is not px
  @if unit($value) != 'px' {
    $value: (strip-unit($value) * strip-unit($base)) * 1px;
  }

  // Turn 0px into 0
  @if $value == 0px {
    $value: 0;
  }

  @return $value;
}

/// The following are from Bourbon (bourbon.io)
///
/// Mixes a color with white.
///
/// @param {Color} $color
///
/// @param {Number (Percentage)} $percent
///   The amount of white to be mixed in.
///
/// @example scss - Usage
///   .element {
///     background-color: tint(#6ecaa6, 40%);
///   }
///
/// @example css - CSS Output
///   .element {
///     background-color: #a8dfc9;
///   }
///
/// @return {Color}
///
@function tint($color, $percent) {
  @return mix(#fff, $color, $percent);
}

/// Mixes a color with black.
///
/// @param {Color} $color
///
/// @param {Number (Percentage)} $percent
///   The amount of black to be mixed in.
///
/// @example scss - Usage
///   .element {
///     background-color: shade(#ffbb52, 60%);
///   }
///
/// @example css - CSS Output
///   .element {
///     background-color: #664a20;
///   }
///
/// @return {Color}
///
@function shade($color, $percent) {
  @return mix(#000, $color, $percent);
}

/// Creates an optimized svg data uri
/// 
/// @param {String} $svg
///
@function svg-url($svg){
    //
    //  Add missing namespace
    //
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');   
    }
    //    
    //  Chunk up string in order to avoid 
    //  "stack level too deep" error
    //     
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1); 
        //
        //   Encode 
        //
        $chunk: str-replace($chunk,'"','\'');
        $chunk: str-replace($chunk,'%','%25');
        $chunk: str-replace($chunk,'&','%26');
        $chunk: str-replace($chunk,'#','%23');       
        $chunk: str-replace($chunk,'{','%7B');
        $chunk: str-replace($chunk,'}','%7D');         
        $chunk: str-replace($chunk,'<','%3C');
        $chunk: str-replace($chunk,'>','%3E');
        
        // 
        //    The maybe list 
        //
        //    Keep size and compile time down
        //    ... only add on documented fail 
        // 
        //  $chunk: str-replace($chunk,'|','%7C');
        //  $chunk: str-replace($chunk,'[','%5B');
        //  $chunk: str-replace($chunk,']','%5D');
        //  $chunk: str-replace($chunk,'^','%5E');
        //  $chunk: str-replace($chunk,'`','%60');
        //  $chunk: str-replace($chunk,';','%3B');
        //  $chunk: str-replace($chunk,'?','%3F');
        //  $chunk: str-replace($chunk,':','%3A');
        //  $chunk: str-replace($chunk,'@','%40');
        //  $chunk: str-replace($chunk,'=','%3D');      
        
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice; 
    }
    @return url("data:image/svg+xml,#{$encoded}");   
}

/// Strip out hash symbol from hex color.
/// 
/// Firefox requires that the `#` be encoded, but because the fill color
/// is being updated via a variable in our inline CSS icons, we need 
/// to strip it out and re-add it again due to timing during compiling.
/// 
/// @param {String} $hexColor
/// 
@function strip-hex($hexColor) {
  @if ( typeof($hexColor) != 'string' ) {
    $hexColor: '#{$hexColor}';
  }
  @return str-replace($hexColor,'#','#');
}

/// Replace characters in a string.
/// 
/// @param {String} $string  String to do search-replace on
/// @param {String} $search  Characters to find in `$string`
/// @param {String} $replace Character(s) to replace `$search` with
/// 
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search); 
  @return if($index, 
    str-slice($string, 1, $index - 1) + $replace + 
    str-replace(str-slice($string, $index + 
    str-length($search)), $search, $replace), 
    $string); 
}  