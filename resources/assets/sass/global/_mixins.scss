$total-columns: 12;

@mixin flex-callout($size: init) {
  @if (type-of($size)) == 'number' {
    flex: 0 0 percentage($size / $total-columns);
    // max-width prevents columns from wrapping early in IE10/11
    max-width: percentage($size / $total-columns);
  }
  @else if ($size == shrink) {
    flex: 0 0 auto;
    overflow: visible;
  }
  @else if ($size == expand) {
    flex: 1 1 auto;
  }
  @else if ($size == init) {
    flex: 1;
  }
}

// Apply styles for state ONLY if the Modernizr class `.no-touchevents` is applied to root 
@mixin force-root($force: false) {
  @if ($force == true) {
    :root & {
      @content;
    }
  }
  @else {
    :root & {
      @content;
    }
  }
}

// Apply styles for state ONLY if the Modernizr class `.no-touchevents` is applied to root 
@mixin no-touchevent($force: false) {
  @if ($force == true) {
    :root.no-touchevents & {
      @content;
    }
  }
  @else {
    :root.no-touchevents & {
      @content;
    }
  }
}

// Apply styles for state ONLY if the Modernizr class `.touchevents` is applied to root 
@mixin on-touchevent($force: false) {
  @if ($force == true) {
    :root.touchevents & {
      @content;
    }
  }
  @else {
    .touchevents & {
      @content;
    }
  }
}

//// Base UI for Stripes and the main content area
///
@mixin paper-ui() {
  background-color: $white;
  box-shadow: 0 2px 5px 0 rgba(0,0,0,0.16),0 2px 10px 0 rgba(0,0,0,0.12);
}

@mixin paper-transition($props: all) {
  transition: $props 0.28s cubic-bezier(0.4, 0, 0.2, 1);
}

@mixin paper-input() {
  border: 0 none;
  border-radius: 4px;
  @include paper-ui;
  @include paper-transition(all);
}

//// Make link color consistent across states
///
@mixin consistent-color($color: currentColor) {
  &,
  &:active,
  &:focus,
  &:hover {
    color: $color;
  }
}

//// Global styling for time and meta information
///
@mixin time-meta-style($color: currentColor, $fontSize: 12, $fontWeight: normal) {
  color: $color;
  font-size: rem($fontSize);
  font-weight: $fontWeight;
  text-transform: uppercase;
}

%css-icon {
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: contain;
  display: inline-block;
}

%align-icon {
  line-height: 1;
  position: relative;
  top: -1px;
  vertical-align: middle;
}

@mixin icon-size($size) {
  width: $size;
  height: $size;
}

@mixin arrow-right-icon( $color: currentColor, $size: 1em ) {
  background-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20viewBox%3D%220%200%2030%2030%22%3E%3Cpath%20fill%3D%22#{$color}%22%20d%3D%22M30.88%2C16.4l0-.05%2C0-.07%2C0-.07%2C0-.06a.72.72%2C0%2C0%2C0%2C0-.28l0-.06%2C0-.07%2C0-.07%2C0-.05-.09-.11L16.51%2C1.21a.71.71%2C0%2C0%2C0-1%2C1L28.56%2C15.29H1.71a.71.71%2C0%2C0%2C0%2C0%2C1.43H28.56L15.5%2C29.78a.71.71%2C0%2C1%2C0%2C1%2C1L30.79%2C16.51Z%22/%3E%3C/svg%3E');
  @extend %css-icon;
  @include icon-size($size);
}

@mixin fat-arrow-icon( $color: currentColor, $size: 1em ) {
  background-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22#{$color}%22%20d%3D%22M30.79%2C15.5%2C22.33%2C7a.7.7%2C0%2C0%2C0-1%2C1l3%2C3H1.7a.7.7%2C0%2C1%2C0%2C0%2C1.41h24L29.3%2C16l-3.59%2C3.59H1.7A.7.7%2C0%2C0%2C0%2C1.7%2C21H24.3l-3%2C3a.7.7%2C0%2C1%2C0%2C1%2C1l8.46-8.46A.7.7%2C0%2C0%2C0%2C30.79%2C15.5Z%22/%3E%0A%3C/svg%3E');
  @extend %css-icon;
  @include icon-size($size);
}

@mixin search-icon( $color: currentColor, $size: 1em ) {
  background-image: url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20viewBox%3D%220%200%2032%2032%22%20fill%3D%22#{$color}%22%3E%3Cpath%20d%3D%22M30.67%2C29.39l-12-12a9.89%2C9.89%2C0%2C1%2C0-1%2C1L29.67%2C30.39a.7.7%2C0%2C1%2C0%2C1-1ZM11%2C19.74a8.46%2C8.46%2C0%2C1%2C1%2C8.46-8.46A8.47%2C8.47%2C0%2C0%2C1%2C11%2C19.74Z%22/%3E%3C/svg%3E');
  @extend %css-icon;
  @include icon-size($size);
}

@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

//// Apply to an parent element to pass on to any child links
///
@mixin add-text-link-style($textDecoration: underline, $color: color(brand-medium), $force: true) {
  a:not([class]) {
    color: $color;
    text-decoration: $textDecoration;
    @include paper-transition(color);
  }

  // Force an override of a parent style by calling on the document root for specificity
  @if ($force == true) {
    @include force-root($force) {
      a:not([class]):active,
      a:not([class]):focus {
        color: currentColor;
      }
    }
    @include no-touchevent($force) {
      a:not([class]):hover {
        color: currentColor;
      }
    }
  }

  @else {
    a:not([class]):active,
    a:not([class]):focus {
      color: currentColor;
    }

    @include no-touchevent {
      a:not([class]):hover {
        color: currentColor;
      }
    }
  }
}

//// Apply directly to links
///
@mixin text-link-style($textDecoration: underline, $color: color(brand-medium), $force: true) {
  &:not([class]) {
    color: $color;
    text-decoration: $textDecoration;
    @include paper-transition(color);
  }

  // Force an override of a parent style by calling on the document root for specificity
  @if ($force == true) {
    @include force-root($force) {
      &:not([class]):active,
      &:not([class]):focus {
        color: currentColor;
      }
    }
    @include no-touchevent($force) {
      &:hover {
        color: currentColor;
      }
    }
  }

  @else {
    &:not([class]):active,
    &:not([class]):focus {
      color: currentColor;
    }

    @include on-touchevent {
      &:not([class]):hover {
        color: currentColor;
      }
    }
  }
}
